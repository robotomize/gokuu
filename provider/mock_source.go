// Code generated by MockGen. DO NOT EDIT.
// Source: source.go

// Package provider is a generated GoMock package.
package provider

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	label "github.com/robotomize/gokuu/label"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// FetchLatest mocks base method.
func (m *MockSource) FetchLatest(ctx context.Context) ([]ExchangeRate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchLatest", ctx)
	ret0, _ := ret[0].([]ExchangeRate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchLatest indicates an expected call of FetchLatest.
func (mr *MockSourceMockRecorder) FetchLatest(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLatest", reflect.TypeOf((*MockSource)(nil).FetchLatest), ctx)
}

// GetExchangeable mocks base method.
func (m *MockSource) GetExchangeable() []label.Symbol {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExchangeable")
	ret0, _ := ret[0].([]label.Symbol)
	return ret0
}

// GetExchangeable indicates an expected call of GetExchangeable.
func (mr *MockSourceMockRecorder) GetExchangeable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExchangeable", reflect.TypeOf((*MockSource)(nil).GetExchangeable))
}

// MockExchangeRate is a mock of ExchangeRate interface.
type MockExchangeRate struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeRateMockRecorder
}

// MockExchangeRateMockRecorder is the mock recorder for MockExchangeRate.
type MockExchangeRateMockRecorder struct {
	mock *MockExchangeRate
}

// NewMockExchangeRate creates a new mock instance.
func NewMockExchangeRate(ctrl *gomock.Controller) *MockExchangeRate {
	mock := &MockExchangeRate{ctrl: ctrl}
	mock.recorder = &MockExchangeRateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchangeRate) EXPECT() *MockExchangeRateMockRecorder {
	return m.recorder
}

// From mocks base method.
func (m *MockExchangeRate) From() label.Currency {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "From")
	ret0, _ := ret[0].(label.Currency)
	return ret0
}

// From indicates an expected call of From.
func (mr *MockExchangeRateMockRecorder) From() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "From", reflect.TypeOf((*MockExchangeRate)(nil).From))
}

// Rate mocks base method.
func (m *MockExchangeRate) Rate() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rate")
	ret0, _ := ret[0].(float64)
	return ret0
}

// Rate indicates an expected call of Rate.
func (mr *MockExchangeRateMockRecorder) Rate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rate", reflect.TypeOf((*MockExchangeRate)(nil).Rate))
}

// Time mocks base method.
func (m *MockExchangeRate) Time() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Time")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Time indicates an expected call of Time.
func (mr *MockExchangeRateMockRecorder) Time() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Time", reflect.TypeOf((*MockExchangeRate)(nil).Time))
}

// To mocks base method.
func (m *MockExchangeRate) To() label.Currency {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "To")
	ret0, _ := ret[0].(label.Currency)
	return ret0
}

// To indicates an expected call of To.
func (mr *MockExchangeRateMockRecorder) To() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "To", reflect.TypeOf((*MockExchangeRate)(nil).To))
}
